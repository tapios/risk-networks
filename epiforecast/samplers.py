class ScaledBetaSampler:
    """
    A class representing a parameterized Beta distribution.
    It's primary method is `sampler.draw()`, which returns 
    `scale * sample`, where

        `sample ~ Beta(b * p / (1 - p), b)`

    Args
    ----
    
    scale : Number by which to scale the outcome of `sample`.
        p : TODO: What do we call "p"?
        b : The 'beta' parameter in the Beta distribution.


    This class is used to model the distribution of infection
    rates among a population.
    """
    def __init__(self, scale, p, b):
        self.scale = scale
        self.b = b # "beta" on Wikipedia
        self.p = p # TODO: correctly name this parameter.

    def draw(self):
        """Return scale * sample, where `sample ~ Beta(b * p / (1 - p), b)`"""
        return self.scale * np.random.beta(self.b * self.p / (1 - self.p), b=self.b)

class DisplacedGammaSampler:
    """
    A class representing a parameterized Gamma distribution.
    It's primary method is `sampler.draw()`, which returns 
    `const + sample`, where

        `sample ~ Gamma(k, theta)`

    Args
    ----
    
    const : Constant added to `sample`, which is generated by `draw()`.
        k : A parameter in the Gamma distribution
    theta : A parameter in the Gamma distribution

    This class is used to model the distribution of clinical
    rates (latent period of infection, infectiousness duration) among a population.
    """
    def __init__(self, const, k, theta):
        self.const = const
        self.k = k # "beta" on Wikipedia
        self.theta = theta # TODO: correctly name this parameter.

    def draw(self):
        """Return const + sample, where `sample ~ Gamma(k, theta)`"""
        return self.const * np.random.gamma(self.k, self.theta)
